This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-11-29T12:28:48.240Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
.eslintrc.json
.gitignore
.repomixignore
convex/README.md
convex/schema.ts
convex/status.ts
convex/tsconfig.json
next.config.ts
package.json
postcss.config.mjs
public/file.svg
public/globe.svg
public/next.svg
public/vercel.svg
public/window.svg
README.md
repomix.config.json
src/app/ConvexClientProvider.tsx
src/app/globals.css
src/app/layout.tsx
src/app/page.tsx
src/components/Game.tsx
src/game/core/Entity.ts
src/game/entities/Character.ts
src/game/entities/Monster.ts
src/game/entities/Player.ts
src/game/scenes/GameScene.ts
tailwind.config.ts
tsconfig.json

================================================================
Repository Files
================================================================

================
File: .eslintrc.json
================
{
  "extends": ["next/core-web-vitals", "next/typescript"]
}

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

#convex
convex/_generated

================
File: .repomixignore
================
# Add patterns to ignore here, one per line
# Example:
# *.log
# tmp/

#convex
convex/_generated

================
File: convex/README.md
================
# Welcome to your Convex functions directory!

Write your Convex functions here.
See https://docs.convex.dev/functions for more.

A query function that takes two arguments looks like:

```ts
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});
```

Using this query function in a React component looks like:

```ts
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});
```

A mutation function looks like:

```ts
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});
```

Using this mutation function in a React component looks like:

```ts
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}
```

Use the Convex CLI to push your functions to a deployment. See everything
the Convex CLI can do by running `npx convex -h` in your project root
directory. To learn more, launch the docs with `npx convex docs`.

================
File: convex/schema.ts
================
// convex/schema.ts
import { defineSchema, defineTable } from "convex/server";
import { v } from "convex/values";

export default defineSchema({
  players: defineTable({
    position: v.object({
      x: v.number(),
      y: v.number(),
    }),
    lastUpdate: v.number(),
    name: v.string(),
  }),
  gameState: defineTable({
    status: v.string(),
    lastUpdate: v.number(),
    activePlayers: v.number(),
  }),
});

================
File: convex/status.ts
================
// convex/status.ts
import { query } from "./_generated/server";

export const getStatus = query({
  args: {},
  handler: async (ctx) => {
    return "Connected!";
  },
});

================
File: convex/tsconfig.json
================
{
  /* This TypeScript project config describes the environment that
   * Convex functions run in and is used to typecheck them.
   * You can modify it, but some settings required to use Convex.
   */
  "compilerOptions": {
    /* These settings are not required by Convex and can be modified. */
    "allowJs": true,
    "strict": true,
    "moduleResolution": "Bundler",
    "jsx": "react-jsx",
    "skipLibCheck": true,
    "allowSyntheticDefaultImports": true,

    /* These compiler options are required by Convex */
    "target": "ESNext",
    "lib": ["ES2021", "dom"],
    "forceConsistentCasingInFileNames": true,
    "module": "ESNext",
    "isolatedModules": true,
    "noEmit": true
  },
  "include": ["./**/*"],
  "exclude": ["./_generated"]
}

================
File: next.config.ts
================
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  /* config options here */
};

export default nextConfig;

================
File: package.json
================
{
  "name": "fibula-bun",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbopack",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "convex": "^1.17.3",
    "next": "15.0.3",
    "phaser": "^3.87.0",
    "react": "19.0.0-rc-66855b96-20241106",
    "react-dom": "19.0.0-rc-66855b96-20241106"
  },
  "devDependencies": {
    "typescript": "^5",
    "@types/node": "^20",
    "@types/react": "^18",
    "@types/react-dom": "^18",
    "postcss": "^8",
    "tailwindcss": "^3.4.1",
    "eslint": "^8",
    "eslint-config-next": "15.0.3"
  }
}

================
File: postcss.config.mjs
================
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;

================
File: public/file.svg
================
<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>

================
File: public/globe.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>

================
File: public/next.svg
================
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>

================
File: public/vercel.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>

================
File: public/window.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>

================
File: README.md
================
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.

================
File: repomix.config.json
================
{
  "output": {
    "filePath": "repomix-output.txt",
    "style": "plain",
    "removeComments": false,
    "removeEmptyLines": false,
    "topFilesLength": 5,
    "showLineNumbers": false,
    "copyToClipboard": false
  },
  "include": [],
  "ignore": {
    "useGitignore": true,
    "useDefaultPatterns": true,
    "customPatterns": []
  },
  "security": {
    "enableSecurityCheck": true
  }
}

================
File: src/app/ConvexClientProvider.tsx
================
"use client";

import { ConvexProvider, ConvexReactClient } from "convex/react";
import { ReactNode } from "react";

const convex = new ConvexReactClient(process.env.NEXT_PUBLIC_CONVEX_URL!);

export function ConvexClientProvider({ children }: { children: ReactNode }) {
  return <ConvexProvider client={convex}>{children}</ConvexProvider>;
}

================
File: src/app/globals.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --background: #ffffff;
  --foreground: #171717;
}

@media (prefers-color-scheme: dark) {
  :root {
    --background: #0a0a0a;
    --foreground: #ededed;
  }
}

body {
  color: var(--foreground);
  background: var(--background);
  font-family: Arial, Helvetica, sans-serif;
}

================
File: src/app/layout.tsx
================
import "./globals.css";
import type { Metadata } from "next";
import { Inter } from "next/font/google";
import { ConvexClientProvider } from "./ConvexClientProvider";

const inter = Inter({ subsets: ["latin"] });

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en">
      <body className={inter.className}>
        <ConvexClientProvider>{children}</ConvexClientProvider>
      </body>
    </html>
  );
}

================
File: src/app/page.tsx
================
// src/app/page.tsx
'use client';

import Game from '@/components/Game';

export default function Home() {
  return (
    <main className="min-h-screen flex flex-col items-center justify-center bg-gray-900">
      <Game />
    </main>
  );
}

================
File: src/components/Game.tsx
================
// src/components/Game.tsx
'use client';

import { useEffect, useRef } from 'react';
import * as Phaser from 'phaser';
import { useQuery } from 'convex/react';
import { api } from '../../convex/_generated/api';
import { GameScene } from '../game/scenes/GameScene';

export default function Game() {
  const gameRef = useRef<Phaser.Game>();
  const status = useQuery(api.status.getStatus);

  useEffect(() => {
    if (gameRef.current) return;

    const config = {
      type: Phaser.AUTO,
      parent: 'game-container',
      width: 800,
      height: 600,
      scene: GameScene,
      backgroundColor: '#1a1a1a',
      pixelArt: true,
    };

    gameRef.current = new Phaser.Game(config);

    return () => {
      gameRef.current?.destroy(true);
    };
  }, []);

  return (
    <div className="flex min-h-screen flex-col items-center justify-center bg-gray-900 p-4">
      <div id="game-container" className="rounded-lg overflow-hidden shadow-2xl" />
      <div className="text-white mt-4">Server Status: {status ?? 'Connecting...'}</div>
    </div>
  );
}

================
File: src/game/core/Entity.ts
================
// src/game/core/Entity.ts
export abstract class Entity {
    protected scene: Phaser.Scene;
    protected container: Phaser.GameObjects.Container;
    protected x: number;
    protected y: number;
  
    constructor(scene: Phaser.Scene, x: number, y: number) {
      this.scene = scene;
      this.x = x;
      this.y = y;
      this.container = scene.add.container(x, y);
    }
  
    public getPosition(): { x: number; y: number } {
      return { x: this.x, y: this.y };
    }
  
    public abstract update(...args: any[]): void;
    public abstract destroy(): void;
  }

================
File: src/game/entities/Character.ts
================
// src/game/entities/Character.ts
import { Entity } from '../core/Entity';

export abstract class Character extends Entity {
  protected hp: number;
  protected maxHp: number;
  protected speed: number;
  protected healthBar?: Phaser.GameObjects.Rectangle;
  protected healthBarBackground?: Phaser.GameObjects.Rectangle;

  constructor(scene: Phaser.Scene, x: number, y: number, hp: number, speed: number) {
    super(scene, x, y);
    this.hp = hp;
    this.maxHp = hp;
    this.speed = speed;
    this.createHealthBar();
  }

  protected createHealthBar(): void {
    this.healthBarBackground = this.scene.add.rectangle(0, -15, 32, 4, 0x000000);
    this.healthBar = this.scene.add.rectangle(0, -15, 32, 4, 0xff0000);
    this.container.add([this.healthBarBackground, this.healthBar]);
  }

  public takeDamage(amount: number): void {
    this.hp = Math.max(0, this.hp - amount);
    this.updateHealthBar();
  }

  protected updateHealthBar(): void {
    if (this.healthBar) {
      this.healthBar.width = (this.hp / this.maxHp) * 32;
    }
  }

  public isAlive(): boolean {
    return this.hp > 0;
  }

  public getHp(): number {
    return this.hp;
  }

  public getMaxHp(): number {
    return this.maxHp;
  }
}

================
File: src/game/entities/Monster.ts
================
// src/game/entities/Monster.ts
import { Character } from './Character';
import { Player } from './Player';
import { GameScene } from '../scenes/GameScene';

export class Monster extends Character {
  private target?: Player;
  private chaseRange: number = 200;
  private attackRange: number = 20;
  private lastAttackTime: number = 0;
  private attackCooldown: number = 1000;
  private scene: GameScene;

  constructor(scene: Phaser.Scene, x: number, y: number) {
    super(scene, x, y, 50, 1);
    this.scene = scene as GameScene;
    this.createSprite();
  }

  private createSprite(): void {
    const body = this.scene.add.rectangle(0, 0, 20, 20, 0xff0000);
    this.container.add(body);
  }

  public setTarget(target: Player): void {
    this.target = target;
  }

  public update(): void {
    if (!this.isAlive() || !this.target) return;

    const distance = Phaser.Math.Distance.Between(
      this.x,
      this.y,
      this.target.getPosition().x,
      this.target.getPosition().y
    );

    if (distance <= this.chaseRange) {
      const angle = Phaser.Math.Angle.Between(
        this.x,
        this.y,
        this.target.getPosition().x,
        this.target.getPosition().y
      );

      const nextX = this.x + Math.cos(angle) * this.speed;
      const nextY = this.y + Math.sin(angle) * this.speed;

      // Check collision before moving
      if (!this.scene.checkCollision(nextX, nextY)) {
        this.x = nextX;
        this.y = nextY;
        this.container.setPosition(this.x, this.y);
      }

      // Attack if in range
      if (distance <= this.attackRange) {
        const currentTime = this.scene.time.now;
        if (currentTime - this.lastAttackTime >= this.attackCooldown) {
          this.target.takeDamage(10);
          this.lastAttackTime = currentTime;
        }
      }
    }
  }

  public destroy(): void {
    this.container.destroy();
  }
}

================
File: src/game/entities/Player.ts
================
// src/game/entities/Player.ts
import { Character } from '../core/Character';
import { Monster } from './Monster';

export class Player extends Character {
  private cursors: Phaser.Types.Input.Keyboard.CursorKeys;
  private weapon?: Phaser.GameObjects.Rectangle;
  private spaceKey: Phaser.Input.Keyboard.Key;
  private lastAttackTime: number = 0;
  private attackCooldown: number = 1000; // 1 second
  private attackRange: number = 50;

  constructor(scene: Phaser.Scene, x: number, y: number) {
    super(scene, x, y, 100, 3);
    this.cursors = scene.input.keyboard!.createCursorKeys();
    this.spaceKey = scene.input.keyboard!.addKey(Phaser.Input.Keyboard.KeyCodes.SPACE);
    this.createSprite();
  }

  private createSprite(): void {
    const head = this.scene.add.circle(0, -8, 6, 0xffcccb);
    const body = this.scene.add.rectangle(0, 4, 16, 20, 0x6495ed);
    this.weapon = this.scene.add.rectangle(-10, 4, 4, 16, 0xc0c0c0);
    const shield = this.scene.add.rectangle(10, 4, 8, 12, 0x8b4513);
    
    this.container.add([body, head, this.weapon, shield]);
  }

  public attack(monsters: Monster[]): void {
    const currentTime = this.scene.time.now;
    if (currentTime - this.lastAttackTime >= this.attackCooldown) {
      monsters.forEach(monster => {
        const distance = Phaser.Math.Distance.Between(
          this.x,
          this.y,
          monster.getPosition().x,
          monster.getPosition().y
        );
        
        if (distance <= this.attackRange) {
          monster.takeDamage(20);
          // Visual feedback for attack
          if (this.weapon) {
            this.scene.tweens.add({
              targets: this.weapon,
              scaleX: 1.5,
              scaleY: 1.5,
              duration: 100,
              yoyo: true
            });
          }
        }
      });
      this.lastAttackTime = currentTime;
    }
  }

  public update(monsters: Monster[]): void {
    if (!this.isAlive()) return;

    // Movement
    const nextPos = { x: this.x, y: this.y };
    
    if (this.cursors.left.isDown) nextPos.x -= this.speed;
    else if (this.cursors.right.isDown) nextPos.x += this.speed;
    if (this.cursors.up.isDown) nextPos.y -= this.speed;
    else if (this.cursors.down.isDown) nextPos.y += this.speed;

    // Update position if moved
    if (nextPos.x !== this.x || nextPos.y !== this.y) {
      this.x = nextPos.x;
      this.y = nextPos.y;
      this.container.setPosition(this.x, this.y);
    }

    // Check for attack
    if (this.spaceKey.isDown) {
      this.attack(monsters);
    }
  }

  public destroy(): void {
    this.container.destroy();
  }
}

================
File: src/game/scenes/GameScene.ts
================
import { Monster } from "../core/Monster";
import { Player } from "../entities/Player";

// src/game/scenes/GameScene.ts
export class GameScene extends Phaser.Scene {
  private player?: Player;
  private monsters: Monster[] = [];
  private worldTiles: Phaser.GameObjects.Rectangle[][] = [];
  private walls: Phaser.GameObjects.Rectangle[] = [];
  private statusText?: Phaser.GameObjects.Text;

  constructor() {
    super({ key: "GameScene" });
  }

  create(): void {
    this.createWorld();
    this.createPlayer();
    this.spawnMonsters();

    // Add status text
    this.statusText = this.add.text(16, 16, "", {
      color: "#fff",
      backgroundColor: "#000000aa",
      padding: { x: 5, y: 5 },
    });
  }

  private createWorld(): void {
    // Create floor tiles
    for (let y = 0; y < 19; y++) {
      this.worldTiles[y] = [];
      for (let x = 0; x < 25; x++) {
        const color = (x + y) % 2 === 0 ? 0x394f2a : 0x3f5930;
        const tile = this.add.rectangle(x * 32, y * 32, 32, 32, color);
        this.worldTiles[y][x] = tile;
      }
    }

    // Add walls
    const wallPositions = [
      { x: 5, y: 5 },
      { x: 6, y: 5 },
      { x: 7, y: 5 },
      { x: 15, y: 10 },
      { x: 15, y: 11 },
      { x: 15, y: 12 },
    ];

    wallPositions.forEach((pos) => {
      const wall = this.add.rectangle(pos.x * 32, pos.y * 32, 32, 32, 0x666666);
      this.walls.push(wall);
    });
  }

  private createPlayer(): void {
    this.player = new Player(this, 400, 300);
  }

  private spawnMonsters(): void {
    const positions = [
      { x: 200, y: 200 },
      { x: 600, y: 400 },
      { x: 300, y: 500 },
    ];

    positions.forEach((pos) => {
      const monster = new Monster(this, pos.x, pos.y);
      if (this.player) {
        monster.setTarget(this.player);
      }
      this.monsters.push(monster);
    });
  }

  update(): void {
    // Update status text
    if (this.statusText && this.player) {
      this.statusText.setText(
        `HP: ${this.player.getHp()}/${this.player.getMaxHp()}\n` +
          `Monsters: ${this.monsters.length}`
      );
    }

    // Update player with reference to monsters for combat
    this.player?.update(this.monsters);

    // Update monsters
    this.monsters.forEach((monster) => monster.update());

    // Clean up dead monsters
    this.monsters = this.monsters.filter((monster) => {
      if (!monster.isAlive()) {
        monster.destroy();
        return false;
      }
      return true;
    });
  }
}

================
File: tailwind.config.ts
================
import type { Config } from "tailwindcss";

export default {
  content: [
    "./src/pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/components/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
    extend: {
      colors: {
        background: "var(--background)",
        foreground: "var(--foreground)",
      },
    },
  },
  plugins: [],
} satisfies Config;

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
